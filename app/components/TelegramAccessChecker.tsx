'use client'

import { useTelegramUser } from '@/app/hooks/useTelegramUser'
import { useEffect, useState } from 'react'

import { ComingSoon } from './ComingSoon'
import { AdminPanel } from './AdminPanel'

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ Telegram –¥–∞–Ω–Ω—ã—Ö
function TelegramDebugInfo({ telegramUser, user, isLoading, error, createOrUpdateUser }: any) {
  const [testDbResult, setTestDbResult] = useState<any>(null)
  const [isTestingDb, setIsTestingDb] = useState(false)

  const testDatabase = async () => {
    setIsTestingDb(true)
    try {
      const response = await fetch('/api/test-db')
      const result = await response.json()
      setTestDbResult(result)
    } catch (error) {
      setTestDbResult({ error: 'Failed to test database' })
    } finally {
      setIsTestingDb(false)
    }
  }

  const forceCreateUser = () => {
    if (telegramUser && createOrUpdateUser) {
      console.log('üîÑ Force creating user:', telegramUser)
      createOrUpdateUser.mutate(telegramUser)
    }
  }

  return (
    <div className="fixed top-4 right-4 bg-black/80 backdrop-blur-sm border border-gray-600 rounded-lg p-4 text-xs text-white max-w-sm z-50 max-h-96 overflow-y-auto">
      <h3 className="font-bold mb-2">üîç Telegram Debug Info</h3>
      <div className="space-y-1">
        <div><strong>Telegram User:</strong> {telegramUser ? '‚úÖ' : '‚ùå'}</div>
        <div><strong>DB User:</strong> {user ? '‚úÖ' : '‚ùå'}</div>
        <div><strong>Loading:</strong> {isLoading ? '‚è≥' : '‚úÖ'}</div>
        <div><strong>Error:</strong> {error ? '‚ùå' : '‚úÖ'}</div>
        
        {telegramUser && (
          <div className="mt-2 p-2 bg-gray-800 rounded">
            <div><strong>ID:</strong> {telegramUser.telegramId}</div>
            <div><strong>Username:</strong> {telegramUser.username || 'N/A'}</div>
            <div><strong>Name:</strong> {telegramUser.firstName} {telegramUser.lastName}</div>
          </div>
        )}
        
        {error && (
          <div className="mt-2 p-2 bg-red-900/50 rounded text-red-300">
            <strong>Error:</strong> {error.message}
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
        <div className="mt-3 space-y-2">
          <button
            onClick={testDatabase}
            disabled={isTestingDb}
            className="w-full px-2 py-1 bg-blue-600 hover:bg-blue-700 disabled:bg-gray-600 rounded text-xs"
          >
            {isTestingDb ? 'Testing...' : 'Test Database'}
          </button>
          
          {telegramUser && (
            <button
              onClick={forceCreateUser}
              disabled={createOrUpdateUser?.isPending}
              className="w-full px-2 py-1 bg-green-600 hover:bg-green-700 disabled:bg-gray-600 rounded text-xs"
            >
              {createOrUpdateUser?.isPending ? 'Creating...' : 'Force Create User'}
            </button>
          )}
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö */}
        {testDbResult && (
          <div className="mt-2 p-2 bg-gray-800 rounded">
            <div><strong>DB Test:</strong> {testDbResult.status}</div>
            {testDbResult.userCount !== undefined && (
              <div><strong>Users:</strong> {testDbResult.userCount}</div>
            )}
            {testDbResult.error && (
              <div className="text-red-300"><strong>Error:</strong> {testDbResult.error}</div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

export function TelegramAccessChecker() {
  const { 
    telegramUser,
    user,
    isTelegramAvailable, 
    isCheckingAccess, 
    hasProfileAccess, 
    isLoading, 
    error,
    createOrUpdateUser
  } = useTelegramUser()
  
  const [hasRendered, setHasRendered] = useState(false)

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–µ–Ω–¥–µ—Ä—ã
  useEffect(() => {
    if (!hasRendered) {
      setHasRendered(true)
    }
  }, [hasRendered])

  // –ï—Å–ª–∏ –µ—â–µ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–ª–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!hasRendered) {
    return (
      <div className="min-h-screen relative stars-bg flex items-center justify-center">
        <div className="text-center relative z-20">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-pink-400 mx-auto mb-4"></div>
          <p className="text-gray-300">–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...</p>
        </div>
      </div>
    )
  }

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
  const isDevelopment = process.env.NODE_ENV === 'development'

  return (
    <>
      {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
      {isDevelopment && (
        <TelegramDebugInfo 
          telegramUser={telegramUser}
          user={user}
          isLoading={isLoading}
          error={error}
          createOrUpdateUser={createOrUpdateUser}
        />
      )}

      {/* –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
      {(() => {
        // –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Coming Soon
        if (!isTelegramAvailable) {
          console.log('‚ùå Telegram not available, showing Coming Soon')
          return <ComingSoon />
        }

        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç ID 1171820656 - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        if (hasProfileAccess) {
          console.log('‚úÖ Admin access granted, showing Admin Panel')
          return <AdminPanel />
        }

        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º Coming Soon
        console.log('üë§ Regular user, showing Coming Soon')
        return <ComingSoon />
      })()}
    </>
  )
}
